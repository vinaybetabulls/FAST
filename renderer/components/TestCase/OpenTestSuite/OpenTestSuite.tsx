import React, { Children, useContext, useEffect, useState } from "react";
import { Select } from "antd";
import { AppContext } from "../../../Context/MainContext";
import Modal from "../../Modal/Modal";
import { WarningFilled } from "@ant-design/icons";
const { Option } = Select;

type Props = {
  isOpen: boolean;
  shortName: string;
  handleOpenTestSuite: () => void;
};
const OpenTestSuite = (props: Props) => {
  const { removedTestSuite, treeData, setTreeData, setRemovedTestSuite } =
    useContext(AppContext);
  const { handleOpenTestSuite, isOpen, shortName } = props;
  const [openTestSuite, setOpenTestSuite] = useState(false);
  const [testSuiteData, setTestSuiteData] = useState([]);

  // console.log({ removedTestSuite });
  useEffect(() => {
    const res = removedTestSuite.filter(
      (testSuite) => testSuite.shortName === shortName
    );
    if (res) {
      setOpenTestSuite(true);
      setTestSuiteData(res);
    } else setOpenTestSuite(false);
  }, [shortName]);

  const handleChange = (event) => {
    // console.log({ openTestSuiteHandleChange: event });
    // console.log({ treeData });
    // console.log({ removedTestSuite });
    const res = removedTestSuite.find(
      (testSuite) => testSuite.shortName === shortName
    );
    const updatedTree = treeData.map((tree) => {
      if (tree.shortName === shortName) {
        tree.children.push(res.data[0]);
      }
      return tree;
    });
    console.log({ res });
    console.log({ updatedTree });
    setTreeData([...updatedTree]);

    treeData.map((tree) => {
      tree.children.map((children) => {
        removedTestSuite.map((testsuite, index) => {
          testsuite.data.map((data) => {
            if (data.shortName === children.shortName) {
              removedTestSuite.splice(index, 1);
            }
          });
        });
      });
    });
    console.log({ removedTestSuite });
    setRemovedTestSuite([...removedTestSuite]);
  };
  return (
    <div>
      <Modal
        setOpen={handleOpenTestSuite}
        title={!!removedTestSuite?.length ? "Open TestSuite" : "Warning"}
        isOpen={isOpen}
      >
        {openTestSuite && !!removedTestSuite?.length ? (
          <Select style={{ width: "100%" }} onChange={handleChange}>
            {testSuiteData.map((removedTestSuite) =>
              removedTestSuite.data.map((testSuite) => (
                <React.Fragment key={testSuite.key}>
                  <Option value={testSuite.key}>{testSuite.title}</Option>
                </React.Fragment>
              ))
            )}
          </Select>
        ) : (
          <p>
            <span style={{ marginRight: "10px" }}>
              No closed Test Suite(s) are found to open!!
            </span>
            <span style={{ color: "#1890ff" }}>
              <WarningFilled />
            </span>
          </p>
        )}
      </Modal>
    </div>
  );
};

export default OpenTestSuite;
